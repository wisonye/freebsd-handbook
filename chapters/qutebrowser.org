* Qute Browser

** Install

#+BEGIN_SRC bash
  doas pkg install qutebrowser
#+END_SRC


** How to run

#+BEGIN_SRC bash
  dbus-run-session qutebrowser 
#+END_SRC


** How to open special pages

*** Open help page

~:help~


*** Open settings page

- ~:set~
- Press =o=, then type =qute://settings=


** Customize settings

*** Keybindings

You can run the following commands to open keybings help page:

#+BEGIN_SRC bash
  #
  # Show all bindings
  #
  :bind

  #
  # Show `:bind` command syntax
  #
  :help :bind

  #
  # Show more details about bindings you need to know
  #
  :help bindings.commands
#+END_SRC


After launching =qutebrowser=, run the following command to customize my key bindings:

#+BEGIN_SRC bash
  #
  # `jj` leave insert mode
  #
  :bind --mode insert jj mode-leave

  #
  # `q` to close tab 
  #
  :unbind d
  :bind q tab-close 

  #
  # `t` to open tab 
  #
  :bind t open -t

  #
  # `h/l` to navigate tabs
  #
  :bind h tab-prev
  :bind l tab-next

  #
  # `u/d` to scroll up and down
  #
  :bind u scroll-page 0 -0.5
  :bind d scroll-page 0 0.5

  #
  # `M` open current url in `mpv`
  #
  :bind M spawn mpv --ytdl-raw-options="format-sort=res:1080" --cache=yes --cache-pause=no --demuxer-readahead-secs=30 --demuxer-seekable-cache=yes {url}
  :bind M hint --add-history links spawn mpv --ytdl-raw-options="format-sort=res:1080" --cache=yes --cache-pause=no --demuxer-readahead-secs=30 --demuxer-seekable-cache=yes {hint-url}

  #
  # Yanking relate
  #
  # :bind yt yank title
  :bind yu yank pretty-url
  :bind ya yank inline [{title}]({url})

  #
  # Cycle/Toggle value between the given values
  #
  :bind ct config-cycle tabs.show always never

  #
  # Toggle or focus dev tools
  #
  :bind dt devtools
  :bind df devtools-focus

  #
  # Selected text to Google Translate
  #
  :bind gt :spawn --userscript ~/.config/qutebrowser/scripts/google_translate.sh
#+END_SRC

You can run ~:bind~ to show all key bindings at any given time.


*** Settings

When dealing with ~:set~, you have auto complection when pressing =tab= key, but you're able to see a detailed help info by running: ~:help XXXX~.

For example, if you don't know what values are available for the =tabs.position= settings, then you can run ~:help tabs.position~.

Here are my favorite settings:

#+BEGIN_SRC bash
  #
  # To open your previous tabs when you reopen qutebrowser, it has 2 conditions:
  #
  # 1. `:set auto_save.session true`
  #
  # 2. You use `:wq` (save and quit) to quit qutebrowser, `Cmd+q` to quit won't restore opened tabs!!!
  #
  :set auto_save.session true

  #
  # Update the adblock list
  #
  :adblock-update

  #
  # Dark mode
  #
  :set colors.webpage.darkmode.enabled true

  #
  # Start page and default page and default search engine
  #
  :set url.start_pages "https://www.google.co.nz"
  :set url.default_page "https://www.google.co.nz"
  :config-dict-add --replace url.searchengines DEFAULT https://google.co.nz/search?q={}

  #
  # Tabs on bottom
  #
  :set tabs.position bottom

  #
  # All UI Fonts
  #
  :set fonts.default_family "SauceCodePro Nerd Font"
  :set fonts.default_size 18px

  #
  # Web page Fonts
  #
  :set fonts.web.size.default 20
  :set fonts.web.size.default_fixed 18
  :set fonts.web.family.standard "SauceCodePro Nerd Font"
  :set fonts.web.family.cursive "SauceCodePro Nerd Font"
  :set fonts.web.family.fantasy "SauceCodePro Nerd Font"
  :set fonts.web.family.serif "SauceCodePro Nerd Font"
  :set fonts.web.family.sans_serif "SauceCodePro Nerd Font"
  :set fonts.web.family.fixed "SauceCodePro Nerd Font Mono"

  :set fonts.debug_console '20px "SauceCodePro Nerd Font"'


  #
  # Unselected Tab colors
  #
  :set colors.tabs.odd.bg #23211b
  :set colors.tabs.odd.fg #9DE2DD
  :set colors.tabs.even.bg #23211b
  :set colors.tabs.even.fg #9DE2DD

  #
  # Selected Tab colors
  #
  :set colors.tabs.selected.even.bg #718885
  :set colors.tabs.selected.even.fg #23211b
  :set colors.tabs.selected.odd.bg #718885
  :set colors.tabs.selected.odd.fg #23211b

  #
  # Pinned Tab colors
  #
  :set colors.tabs.pinned.odd.bg #ffe64d
  :set colors.tabs.pinned.odd.fg #23211b
  :set colors.tabs.pinned.even.bg #ffe64d
  :set colors.tabs.pinned.even.fg #23211b

  #
  # Vertical bar indicator in the tab (most-left)
  #
  :set colors.tabs.indicator.stop #ffe64d
#+END_SRC


** Where is the configuration file

You can open a tab with =qute://version= and search for =config= to see all config related settings.

*** MacOS

If you install =qutebrowser= via =brew install qutebrowser=, then it's =~/.qutebrowser= folder but for the =autoconfig.yml=, it's in =Users/wison/Library/Preferences/qutebrowser= by default!!!


*** Non-macos

=~/.config/qutebrowser/autoconfig.yml=

Actuall, you can backup and restore this file with run all the above commands line-by-line in =qutebrowser=.



** How to fix font issue for particular websites

If you see any website can't display your preset fonts correctly, then you can do the following steps to fix it:

*** 1. Create a user custom css file and add the =css selector= to override the ~font-family~ settings:

For example, I created =~/.config/qutebrowser/custom_website_stylesheets.css= with the following CSS settings:

#+BEGIN_SRC css
  /*
   * Fixed `https://docs.freebsd.org/en/books/handbook/` font issue
   */
  #TableOfContents {
      font-family: "JetBrainsMono Nerd Font";
  }

  #MenuContents {
      font-family: "JetBrainsMono Nerd Font";
  }

  /*
   * Fixed `https://odin-lang.org/docs/overview/` font issue
   */
  .odin-menu {
      font-family: "JetBrainsMono Nerd Font";
  }

  .odin-main {
      font-family: "JetBrainsMono Nerd Font";
  }

  #TableOfContents a {
      font-family: "JetBrainsMono Nerd Font";
  }

  /*
   * Fixed `https://www.linkedin.com/` font issue
   */
  :lang(en) {
      font-family: "JetBrainsMono Nerd Font";
  }
#+END_SRC


*** 2. Add that custom css filename to the qutebrowser settings:

You can either set it live in qutebrowser:

#+BEGIN_SRC conf
  :set content.user_stylesheets custom_website_stylesheets.css
#+END_SRC


Or set it into : =~/.config/qutebrowser/autoconfig.yml=:

#+BEGIN_SRC conf
  content.user_stylesheets:
    global: custom_website_stylesheets.css
#+END_SRC


** Userscript: =extension= concept in other browsers

All details are in [[https://github.com/qutebrowser/qutebrowser/blob/main/doc/userscripts.asciidoc][here]].

*** Available env vars inside your userscript

[ Common ]
=QUTE_MODE=: Either hints (started via hints) or command (started via command or key binding).
=QUTE_USER_AGENT=: The currently set user agent, if customized.
=QUTE_FIFO=: The FIFO or file to write commands to.
=QUTE_HTML=: Path of a file containing the HTML source of the current page.
=QUTE_TEXT=: Path of a file containing the plaintext of the current page.
=QUTE_CONFIG_DIR=: Path of the directory containing qutebrowser’s configuration.
=QUTE_DATA_DIR=: Path of the directory containing qutebrowser’s data.
=QUTE_DOWNLOAD_DIR=: Path of the downloads directory.
=QUTE_COMMANDLINE_TEXT=: Text currently in qutebrowser’s command line. Note this is only useful for userscripts spawned (e.g. via a keybinding) when qutebrowser is still in command mode. If you want to receive arguments passed to your userscript via :spawn, use the normal way of getting commandline arguments (e.g. $@ in bash or sys.argv / argparse / …​ in Python).
=QUTE_VERSION=: The version of qutebrowser, as a string like "2.0.0". Note that this was added in v2.0.0, thus older versions can only be detected by the absence of this variable.

[ In command mode ]
=QUTE_URL=: The current page URL.
=QUTE_TITLE=: The title of the current page.
=QUTE_SELECTED_TEXT=: The text currently selected on the page.
=QUTE_COUNT=: The count from the spawn command running the userscript.
=QUTE_TAB_INDEX=: The current tab’s index.

[ In hints mode ]
=QUTE_URL=: The URL selected via hints.
=QUTE_CURRENT_URL=: The current page URL.
=QUTE_SELECTED_TEXT=: The plain text of the element selected via hints.
=QUTE_SELECTED_HTML=: The HTML of the element selected via hints.


*** Define a userscript

Place the following content into =~/.config/qutebrowser/scripts/google_translate.sh=:

#+BEGIN_SRC bash
  #!/usr/local/bin/bash
  #------------------------------------------------------------------------------------------
  # Get the selected text and open GoogleTranslate URL to a new tab
  #------------------------------------------------------------------------------------------
  echo "open -t https://translate.google.com/?sl=en&tl=zh-CN&text=$QUTE_SELECTED_TEXT&op=translate" >> "$QUTE_FIFO"

  #------------------------------------------------------------------------------------------
  # This is the ideal way:
  #
  # Get the selected text and somehow call GoogleTranslate API to get back the result,
  # and use `:message-warning` command to display the translate result as a message inside
  # `qutebrowser`.
  #------------------------------------------------------------------------------------------
  # SELECTED=$QUTE_SELECTED_TEXT
  # TRANSLATE_RESULT=`https://translate.google.com/?sl=en&tl=zh-CN&text=$SELECTED&op=translate`
  # echo "message-warning '$TRANSLATE_RESULT'" >> "$QUTE_FIFO"
#+END_SRC

Make sure ~chmod +x~ to that file!!!


*** Call a userscript

There are 2 common ways to call a userscript:

#+BEGIN_SRC bash
  #
  # Directly run your userscript in command mode
  #
  :spawn --userscript

  #
  # Bind XXX to run your userscript
  #
  :bind XXX spawn --userscript

  #
  # Bind XXX to show a hint and run your userscript on the {hint-url}
  #
  :bind XXX hint links userscript
#+END_SRC


Example to bind the =google_translate.sh= userscript to ~gt~

#+BEGIN_SRC bash
  :bind gt :spawn --userscript ~/.config/qutebrowser/scripts/google_translate.sh
#+END_SRC
