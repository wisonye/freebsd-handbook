* Install basic tools and setup

** Install =doas=

#+BEGIN_SRC bash
  #
  # Make sure change to `root`
  #
  su 

  #
  # Install
  #
  pkg install doas

  #
  # Copy configuration file
  #
  cp -rvf /usr/local/etc/doas.conf.sample /usr/local/etc/doas.conf
#+END_SRC

Add the following settings to =doas.conf=:

#+BEGIN_SRC conf
  permit nopass keepenv setenv { $PATH } wison as root
#+END_SRC


Make it more safe:

#+BEGIN_SRC bash
  doas chmod 400 /usr/local/etc/doas.conf
#+END_SRC


** Install everything I need

#+BEGIN_SRC bash
  doas pkg install tree git git-delta bat ripgrep procs htop btop fastfetch fzf fish neovim py311-pynvim unzip icu npm cmake tmux emacs-devel aspell aspell-ispell en-aspell lf
#+END_SRC

=emacs-devel= is latest developement version, it enables =NATIVECOMP= feature!


** Change =fish= as default shell

#+BEGIN_SRC bash
  chsh -s /usr/local/bin/fish
#+END_SRC

Relogin to take effect.


** =Neovim= config related

*** Install dependencies

Some neovim plugins need to use =xdg-open= program, and =telescope-fzf-native.vim= needs =cmake=, =mason= plugin needs =unzip icu npm=:

#+BEGIN_SRC bash
  doas pkg install xdg-utils cmake unzip icu npm
#+END_SRC


*** Make sure =~/.npm= is owned by you

Before running =vim= for the first time, make to sure check whether =~/.npm= is owned by you or not, if no, then you will fail to install all LSP server and you can see the following errors in =:MasonLog=:

#+BEGIN_SRC bash
  [ERROR Tue Aug  6 16:21:01 2024] ...e/nvim/lazy/mason.nvim/lua/mason-core/installer/init.lua:249: Installation failed for Package(name=typescript-language-server) error=spawn: npm failed with exit code - and signal -. npm is not executable
#+END_SRC

That means =~/.npm= owns by =root=! You can remove it and try again:)


*** =clangd= LSP server

=Mason= can't install =clangd=, you need to installl by yourself:

#+BEGIN_SRC bash
  #
  # `doas pkg install zig` needs `llvm18`!!!
  #
  doas pkg install llvm18
#+END_SRC

Then put =/usr/local/llvm18/bin= into your =$PATH=


*** =lua-ls= LSP server

=Mason= can't install =lua-ls=, you need to installl by yourself:

#+BEGIN_SRC bash
  # Install `ninja`
  doas pkg install ninja libinotify

  # Clone repo
  git clone --depth=1 https://github.com/LuaLS/lua-language-server
#+END_SRC


Now, fix the cpp error: ~std::copy No member named 'copy' in namespace 'std'; did you mean 'bcopy'?~

You need to add the ~#include <algorithm>~ line to the following files:

#+BEGIN_SRC text
  3rd/bee.lua/3rd/fmt/fmt/color.h
  3rd/luamake/bee.lua/3rd/fmt/fmt/color.h
#+END_SRC

After that, they should look like this:

#+BEGIN_SRC cpp
  #include "format.h"

  // Add this line!!!
  #include <algorithm>
#+END_SRC


Now, you need to disable the following unit tests:

#+BEGIN_SRC fish
  #
  # Disable unit test
  #
  :> 3rd/bee.lua/test/test.lua
  :> test.lua

  # Compile
  ./make.sh
#+END_SRC

The ~:> 3rd/bee.lua/test/test.lua~ command should fail on the first time, as it doesn't exists until you run ~./make.sh~ (to pull the repo). That's why you have to run it again after the failed ~./make.sh~!!!

After done with the compilation, put =lua-language-server/bin= to your =$PATH=


*** =zls= LSP server

=Mason= can't install =zls=, you need to installl by yourself:

First you need to download and install the lastest zig release from [[here][https://ziglang.org/download/]] or install via =pkg=:

#+BEGIN_SRC bash
  doas pkg install zig
#+END_SRC


#+BEGIN_SRC bash
  #
  # First you need to print the installed zig version before cloning `zls`
  #
  pkg info zig

  #
  # Clone `zls` repo with the SAME zig release TAG you installed!!!
  # For example, `0.13.0`
  #
  git clone --depth 1 --branch 0.13.0 https://github.com/zigtools/zls

  # Compile
  cd zls
  zig build -Doptimize=ReleaseSafe
#+END_SRC

Then move =zig-out/bin/zls= to your =$PATH= directory.


** =Python= and =pip= and =Virtual Environment=

*** Install =Python=

#+BEGIN_SRC fish
  # lang/python                    "meta-port" for the default version of Python interpreter
  # lang/python-doc-html           Documentation for the Python programming language
  # lang/python-doc-pdf-a4         Documentation for the Python programming language
  # lang/python-doc-text           Documentation for the Python programming language
  # lang/python-mode.el            Emacs lisp module for the Python language
  # lang/python2                   Meta-port for the Python interpreter 2.7
  # lang/python27                  Interpreted object-oriented programming language
  # lang/python3                   Meta-port for the Python interpreter 3.x
  # lang/python310                 Interpreted object-oriented programming language
  # lang/python311                 Interpreted object-oriented programming language
  # lang/python312                 Interpreted object-oriented programming language
  # lang/python39                  Interpreted object-oriented programming language
#+END_SRC

By default, after =Install everything I need= section, =Python= should be already installed automatically. If not, install it manually by picking the specific version you wanted:

#+BEGIN_SRC fish
  #
  # For example, you want `lang/python311`
  #
  doas pkg install python311

  #
  # Make sure to create a symbol link to it, as the installed
  # binary usually named as `pythonXXX` (XXX is the version number)
  #
  doas ln -s /usr/local/bin/python3.11 /usr/local/bin/python

  #
  # Print the version to confirm it works
  # binary usually named as `pythonXXX` (XXX is the version number)
  #
  python --version
  # Python 3.11.12
#+END_SRC



*** Install =pip=

=Pip= is the standard =Python package manager= for installing and managing project dependencies.


#+BEGIN_SRC fish
  #
  # Download
  #
  cd ~/temp && curl -O https://bootstrap.pypa.io/get-pip.py

  #
  # Install it
  #
  doas python get-pip.py

  #
  # Print version to confirm it works
  #
  pip --version
#+END_SRC


Now, try to install something:

#+BEGIN_SRC fish
  I  wison | /home/wison/temp/freebsd-handbook   pip install calcure

  # Defaulting to user installation because normal site-packages is not writeable
  # Collecting calcure
  #   Downloading calcure-3.2.1-py3-none-any.whl.metadata (5.3 kB)
  # Collecting holidays (from calcure)
  #   Downloading holidays-0.76-py3-none-any.whl.metadata (44 kB)
  # Collecting jdatetime (from calcure)
  #   Downloading jdatetime-5.2.0-py3-none-any.whl.metadata (5.6 kB)
  # Collecting icalendar (from calcure)
  #   Downloading icalendar-6.3.1-py3-none-any.whl.metadata (9.0 kB)
  # Collecting python-dateutil (from holidays->calcure)
  #   Downloading python_dateutil-2.9.0.post0-py2.py3-none-any.whl.metadata (8.4 kB)
  # Collecting tzdata (from icalendar->calcure)
  #   Downloading tzdata-2025.2-py2.py3-none-any.whl.metadata (1.4 kB)
  # Collecting jalali-core>=1.0 (from jdatetime->calcure)
  #   Downloading jalali_core-1.0.0-py3-none-any.whl.metadata (738 bytes)
  # Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/site-packages (from python-dateutil->holidays->calcure) (1.17.0)
  # Downloading calcure-3.2.1-py3-none-any.whl (62 kB)
  # Downloading holidays-0.76-py3-none-any.whl (1.1 MB)
  #    ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 1.1/1.1 MB 4.7 MB/s eta 0:00:00
  # Downloading icalendar-6.3.1-py3-none-any.whl (242 kB)
  # Downloading jdatetime-5.2.0-py3-none-any.whl (12 kB)
  # Downloading jalali_core-1.0.0-py3-none-any.whl (3.6 kB)
  # Downloading python_dateutil-2.9.0.post0-py2.py3-none-any.whl (229 kB)
  # Downloading tzdata-2025.2-py2.py3-none-any.whl (347 kB)
  # Installing collected packages: tzdata, python-dateutil, jalali-core, jdatetime, icalendar, holidays, calcure
  #    ━━━━━━━━━━━━━━━━━━━━━━╸━━━━━━━━━━━━━━━━━ 4/7 [icalendar]  WARNING: The script icalendar is installed in '/home/wison/.local/bin' which is not on PATH.
  #   Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.
  #    ━━━━━━━━━━━━━━━━━━━━━━━━━━━━╸━━━━━━━━━━━ 5/7 [holidays]  WARNING: The script calcure is installed in '/home/wison/.local/bin' which is not on PATH.
  #   Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.
  # Successfully installed calcure-3.2.1 holidays-0.76 icalendar-6.3.1 jalali-core-1.0.0 jdatetime-5.2.0 python-dateutil-2.9.0.post0 tzdata-2025.2
#+END_SRC

As you can see the warnning: =WARNING: The script icalendar is installed in '/home/wison/.local/bin' which is not on PATH.=

So, make sure put it into your =$PATH=


Tips:

=Pip= install cache folder: ~/.cache/pip/
=Pip= install binray folder: ~/.local/bin




*** =Virtual Environment=

Python uses the =venv= module to create isolated =virtual environments= on your server, allowing you to separate specific dependencies in your project from the system-wide Python environment. Follow the steps below to create a new virtual environment using the venv module.

#+BEGIN_SRC fish
  #
  # Go into your python projects root folder, for example:
  #
  cd ~/python

  #
  # 1. Create virtual environment in current folder
  #
  python -m venv terminal-ui

  #
  # 2. Activate virtual environment (I use `fish` shell)
  #
  . terminal-ui/bin/activate.fish
  # I (terminal-ui)  wison | /home/wison/python   pwd

  #
  # 3. See where `python` bin lives
  #
  which python
  # /home/wison/python/terminal-ui/bin/python


  #
  # 4. Work on your python project, all `pip install` modules only
  #    related to this project (inside the current virtual
  #    environment)
  #
  #    For example: install some packages
  pip install requests
  # Collecting requests
  #   Downloading requests-2.32.4-py3-none-any.whl.metadata (4.9 kB)
  # Collecting charset_normalizer<4,>=2 (from requests)
  #   Downloading charset_normalizer-3.4.2-py3-none-any.whl.metadata (35 kB)
  # Collecting idna<4,>=2.5 (from requests)
  #   Downloading idna-3.10-py3-none-any.whl.metadata (10 kB)
  # Collecting urllib3<3,>=1.21.1 (from requests)
  #   Downloading urllib3-2.5.0-py3-none-any.whl.metadata (6.5 kB)
  # Collecting certifi>=2017.4.17 (from requests)
  #   Downloading certifi-2025.7.14-py3-none-any.whl.metadata (2.4 kB)
  # Downloading requests-2.32.4-py3-none-any.whl (64 kB)
  #    ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 64.8/64.8 kB 2.1 MB/s eta 0:00:00
  # Downloading certifi-2025.7.14-py3-none-any.whl (162 kB)
  #    ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 162.7/162.7 kB 2.6 MB/s eta 0:00:00
  # Downloading charset_normalizer-3.4.2-py3-none-any.whl (52 kB)
  #    ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 52.6/52.6 kB 4.2 MB/s eta 0:00:00
  # Downloading idna-3.10-py3-none-any.whl (70 kB)
  #    ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 70.4/70.4 kB 6.1 MB/s eta 0:00:00
  # Downloading urllib3-2.5.0-py3-none-any.whl (129 kB)
  #    ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 129.8/129.8 kB 4.7 MB/s eta 0:00:00
  # Installing collected packages: urllib3, idna, charset_normalizer, certifi, requests
  # Successfully installed certifi-2025.7.14 charset_normalizer-3.4.2 idna-3.10 requests-2.32.4 urllib3-2.5.0
  # 
  # [notice] A new release of pip is available: 24.0 -> 25.1.1
  # [notice] To update, run: pip install --upgrade pip

  #
  # 4.1. If you see `[notice] To update, run: pip install --upgrade pip`, make sure
  #      you upgrade, otherwise, some commands won't work correctly.
  #
  pip install --upgrade pip
  # Requirement already satisfied: pip in ./lib/python3.11/site-packages (24.0)
  # Collecting pip
  #   Downloading pip-25.1.1-py3-none-any.whl.metadata (3.6 kB)
  # Downloading pip-25.1.1-py3-none-any.whl (1.8 MB)
  #    ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 1.8/1.8 MB 3.4 MB/s eta 0:00:00
  # Installing collected packages: pip
  #   Attempting uninstall: pip
  #     Found existing installation: pip 24.0
  #     Uninstalling pip-24.0:
  #       Successfully uninstalled pip-24.0
  # Successfully installed pip-25.1.1

  #
  # 4.2 You can list all python modules in this virtual environment:
  #
  pip freeze
  # certifi==2025.7.14
  # charset-normalizer==3.4.2
  # idna==3.10
  # requests==2.32.4
  # urllib3==2.5.0

  #
  # 5. When you done with the current project, run `deactivate` to exit
  #    the current virtual environment.
  #
  deactivate
#+END_SRC


** Create and copy GIT SSH key

#+BEGIN_SRC bash
  ssh-keygen -t ed25519 -C "YOUR_EMAIL_HERE"

  # If you're using `Fish` shell, then better change to `bash` before you run
  # this command:
  #
  # bash
  eval "$(ssh-agent -s)"
  ssh-add ~/.ssh/id_ed25519

  #
  # Then ssh into this machine, cat the pub key and create SSH key on Github settings
  #
  # xclip -selection clipboard < ~/.ssh/id_ed25519.pub
#+END_SRC


** Setup git

#+BEGIN_SRC bash
  git config --global user.name "YOUR_PREFFERED_USER_NAME_HERE"
  git config --global user.email "YOUR_EMAIL_HERE"

  git config --global pull.rebase false
  git config --global core.pager delta
  git config --global interactive.diffFilter "delta --color-only"
  git config --global delta.navigate true
  git config --global delta.light false
  git config --global delta.line-numbers true
  git config --global delta.side-by-side true
  git config --global delta.show-syntax-themes true
  git config --global merge.conflictstyle diff3
  git config --global diff.colorMoved default
#+END_SRC


** Install =Rust= when needed

#+BEGIN_SRC bash
  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh

  rustup component add rust-analyzer
#+END_SRC

Then relogin to take effects.



** Chinese fonts

*** SourceCodePro

#+BEGIN_SRC bash
  # Install nerd font version
  cd temp
  curl -OL https://github.com/ryanoasis/nerd-fonts/releases/latest/download/SourceCodePro.tar.xz
  tar xvf SourceCodePro.tar.xz
  rm -rf  SourceCodePro.tar.xz

  # Update font cache
  doas mkdir /usr/local/share/fonts/source-code-pro-nerd-fonts
  doas mv ./*.ttf /usr/local/share/fonts/source-code-pro-nerd-fonts/
  doas fc-cache -fv
  fc-cache -fv
#+END_SRC


*** JetBrains mono

#+BEGIN_SRC bash
  # Install nerd font version
  cd temp
  curl -OL https://github.com/ryanoasis/nerd-fonts/releases/download/v3.3.0/JetBrainsMono.tar.xz
  tar xvf JetBrainsMono.tar.xz
  rm -rf  JetBrainsMono.tar.xz

  # Update font cache
  doas mkdir /usr/local/share/fonts/jetbrains-mono-nerd-fonts
  doas mv ./*.ttf /usr/local/share/fonts/jetbrains-mono-nerd-fonts/
  doas fc-cache -fv
  fc-cache -fv
#+END_SRC


*** Chinese fonts

#+BEGIN_SRC bash
  doas pkg install chinese/sourcehansans-sc-otf chinese/sourcehansans-tc-otf
#+END_SRC


*** Webfont (=QuteBrowser= needs this!!!)

This is a MUST to install, otherwise =qutebrowser= looks super ugly in some websites!!!

#+BEGIN_SRC fish
  doas pkg install webfonts 
#+END_SRC
