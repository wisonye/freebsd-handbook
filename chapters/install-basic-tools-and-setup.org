* Install basic tools and setup

** Install =doas=

#+BEGIN_SRC bash
  #
  # Make sure change to `root`
  #
  su 

  #
  # Install
  #
  pkg install doas

  #
  # Copy configuration file
  #
  cp -rvf /usr/local/etc/doas.conf.sample /usr/local/etc/doas.conf
#+END_SRC

Add the following settings to =doas.conf=:

#+BEGIN_SRC conf
  permit nopass keepenv setenv { $PATH } wison as root
#+END_SRC


Make it more safe:

#+BEGIN_SRC bash
  doas chmod 400 /usr/local/etc/doas.conf
#+END_SRC


** Install everything I need

#+BEGIN_SRC bash
  doas pkg install tree git git-delta bat ripgrep procs htop btop fastfetch fzf fish neovim py311-pynvim unzip icu npm cmake tmux emacs-devel aspell aspell-ispell en-aspell lf
#+END_SRC

=emacs-devel= is latest developement version, it enables =NATIVECOMP= feature!


** Change =fish= as default shell

#+BEGIN_SRC bash
  chsh -s /usr/local/bin/fish
#+END_SRC

Relogin to take effect.


** Neovim config related

*** Install dependencies

Some neovim plugins need to use =xdg-open= program, and =telescope-fzf-native.vim= needs =cmake=, =mason= plugin needs =unzip icu npm=:

#+BEGIN_SRC bash
  doas pkg install xdg-utils cmake unzip icu npm
#+END_SRC


*** Make sure =~/.npm= is owned by you

Before running =vim= for the first time, make to sure check whether =~/.npm= is owned by you or not, if no, then you will fail to install all LSP server and you can see the following errors in =:MasonLog=:

#+BEGIN_SRC bash
  [ERROR Tue Aug  6 16:21:01 2024] ...e/nvim/lazy/mason.nvim/lua/mason-core/installer/init.lua:249: Installation failed for Package(name=typescript-language-server) error=spawn: npm failed with exit code - and signal -. npm is not executable
#+END_SRC

That means =~/.npm= owns by =root=! You can remove it and try again:)


*** =clangd= LSP server

=Mason= can't install =clangd=, you need to installl by yourself:

#+BEGIN_SRC bash
  #
  # `doas pkg install zig` needs `llvm18`!!!
  #
  doas pkg install llvm18
#+END_SRC

Then put =/usr/local/llvm18/bin= into your =$PATH=


*** =lua-ls= LSP server

=Mason= can't install =lua-ls=, you need to installl by yourself:

#+BEGIN_SRC bash
  # Install `ninja`
  doas pkg install ninja libinotify

  # Clone repo
  git clone --depth=1 https://github.com/LuaLS/lua-language-server

  #
  # Disable unit test
  #
  cd lua-language-server
  :> 3rd/bee.lua/test/test.lua
  :> test.lua

  # Compile
  ./make.sh
#+END_SRC

The ~:> 3rd/bee.lua/test/test.lua~ command should fail on the first time, as it doesn't exists until you run ~./make.sh~ (to pull the repo). That's why you have to run it again after the failed ~./make.sh~!!!

After done with the compilation, put =lua-language-server/bin= to your =$PATH=


*** =zls= LSP server

=Mason= can't install =zls=, you need to installl by yourself:

First you need to download and install the lastest zig release from [[here][https://ziglang.org/download/]] or install via =pkg=:

#+BEGIN_SRC bash
  doas pkg install zig
#+END_SRC


#+BEGIN_SRC bash
  #
  # First you need to print the installed zig version before cloning `zls`
  #
  pkg info zig

  #
  # Clone `zls` repo with the SAME zig release TAG you installed!!!
  # For example, `0.13.0`
  #
  git clone --depth 1 --branch 0.13.0 https://github.com/zigtools/zls

  # Compile
  cd zls
  zig build -Doptimize=ReleaseSafe
#+END_SRC

Then move =zig-out/bin/zls= to your =$PATH= directory.


** Create and copy GIT SSH key

#+BEGIN_SRC bash
  ssh-keygen -t ed25519 -C "YOUR_EMAIL_HERE"

  # If you're using `Fish` shell, then better change to `bash` before you run
  # this command:
  #
  # bash
  eval "$(ssh-agent -s)"
  ssh-add ~/.ssh/id_ed25519

  #
  # Then ssh into this machine, cat the pub key and create SSH key on Github settings
  #
  # xclip -selection clipboard < ~/.ssh/id_ed25519.pub
#+END_SRC


** Setup git

#+BEGIN_SRC bash
  git config --global user.name "YOUR_PREFFERED_USER_NAME_HERE"
  git config --global user.email "YOUR_EMAIL_HERE"

  git config --global pull.rebase false
  git config --global core.pager delta
  git config --global interactive.diffFilter "delta --color-only"
  git config --global delta.navigate true
  git config --global delta.light false
  git config --global delta.line-numbers true
  git config --global delta.side-by-side true
  git config --global delta.show-syntax-themes true
  git config --global merge.conflictstyle diff3
  git config --global diff.colorMoved default
#+END_SRC


** Install =Rust= when needed

#+BEGIN_SRC bash
  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh

  rustup component add rust-analyzer
#+END_SRC

Then relogin to take effects.



** Chinese fonts

*** SourceCodePro

#+BEGIN_SRC bash
  # Install nerd font version
  cd temp
  curl -OL https://github.com/ryanoasis/nerd-fonts/releases/latest/download/SourceCodePro.tar.xz
  tar xvf SourceCodePro.tar.xz
  rm -rf  SourceCodePro.tar.xz

  # Update font cache
  sudo mkdir /usr/local/share/fonts/source-code-pro-nerd-fonts
  sudo mv ./*.ttf /usr/local/share/fonts/source-code-pro-nerd-fonts/
  sudo fc-cache -fv
  fc-cache -fv
#+END_SRC


*** JetBrains mono

#+BEGIN_SRC bash
  sudo mkdir /usr/local/share/fonts/source-code-pro-nerd-fonts

  # Install nerd font version
  cd temp
  curl -OL https://github.com/ryanoasis/nerd-fonts/releases/download/v3.3.0/JetBrainsMono.tar.xz
  tar xvf JetBrainsMono.tar.xz
  rm -rf  JetBrainsMono.tar.xz

  # Update font cache
  sudo mkdir /usr/local/share/fonts/jetbrains-mono-nerd-fonts
  sudo mv ./*.ttf /usr/local/share/fonts/jetbrains-mono-nerd-fonts/
  sudo fc-cache -fv
  fc-cache -fv
#+END_SRC


*** Chinese fonts

#+BEGIN_SRC bash
  doas pkg install chinese/sourcehansans-sc-otf chinese/sourcehansans-tc-otf
#+END_SRC
