* Bhyve Virtualization in =FreeBSD=

=bhyve= is the hyprvisor in =FreeBSD=, and =vm_bhyve= is a frontend for =bhyve= which provides the =vm= command to manage the =bhyve= virtual machines.

** Install and setup

#+BEGIN_SRC bash
   #
   # `grub2-bhyve`: If want Linux guest
   # `bhyve-firmware`: If you want UEFI and VNC graphic support
   #
   doas pkg install vm-bhyve-devel grub2-bhyve bhyve-firmware

   # 
   # Create a new ZFS dataset to hold all VM files
   # 
   doas zfs create -o mountpoint=/home/$USER/vm zroot/vm
   doas chown -R $USER:$USER ~/vm/

   #
   # Load all related modules and settings
   #
   doas sysrc vmm_enable=YES
   doas sysrc vm_enable=YES
   doas sysrc vm_dir="zfs:zroot/vm"
#+END_SRC


** =vm init= and =tmux=

=vm init= needs be run once after host reboot before running any other =vm= commands. The main function of the =init= command is as follows:

o Load all necessary kernel modules if not already loaded
o Set tap devices to come up automatically when opened
o Create any configured virtual switches


=vm init= also create subdirectories inside =$vm_dir= to hold configuration and templates:

#+BEGIN_SRC bash
  ls -lhta ~/vm

  # total 11
  # drwxr-xr-x   2 root  wison    4B Feb 21 16:37 .config/
  # drwxr-xr-x   2 root  wison    3B Feb 21 15:44 .templates/
  # drwxr-xr-x   6 wison wison    6B Feb 21 15:44 ./
  # drwxr-xr-x   2 root  wison    2B Feb 21 15:44 .img/
  # drwxr-xr-x   2 root  wison    2B Feb 21 15:44 .iso/
  # drwxr-xr-x  22 wison wison   54B Feb 21 15:41 ../
#+END_SRC


By default, =vm-bhyve= uses =cu/nmdm= as a console session management tool. If you prefer to run virtual machines on a =tmux= session instead, this is now supported in v1.1+. All you need to do is to set console option in =$vm_dir/.config/system.conf=:

#+BEGIN_SRC bash
  vm set console=tmux
#+END_SRC

Once set, any new guests started will have a =tmux= session associated with them. The session name is the same as the guest name, although you can also attach it to the tmux session using the standard =vm console guest= command.

For example:

#+BEGIN_SRC bash
  #
  # vm list |grep fbsd
  #
  fbsd            default         bhyveload   2      256M      -                    No           Running (88761)

  #
  # tmux ls
  #
  fbsd: 1 windows (created Tue Jun 28 10:42:22 2016) [168x46]
#+END_SRC


So, you can use ~tmux attach-session -t fbsd~ and do a quick switch between different tmux sessions.


** Create different types of virtual switches based on your need

The =vm= utility automatically creates a =bridge= device for each =virtual switch=. When a guset is started, a virtual ethernet (=tap=) device is created, and it will be automatically added as a member of the specified =virtual switch=.

*** Create public bridge virtual switch

If you want all VMs attached to your current (FreeBSD Bhyve Host) network just like another computer on your LAN, then you should create a VM switch in this way.

For example, your local LAN network is =192.168.1.0/24=, the network topology would like this:

----------------------------------------------------
                192.168.1.0/24
----------------------------------------------------
        |             |        |        |
        |             |        |        |
        |             |        |        |
  /------------\   /-----\  /-----\  /-------\
  |  FreeBSD   |   | VM1 |  | VM2 |  | VM... |
  | Bhyve host |   |     |  |     |  |       |
  \------------/   \-----/  \-----/  \-------/


Pros:
    - All VMs can access the internet via your host NIC without extra configuration.

Crons:
    - Your =PF= can't protect all VMs, they have to setup their firewalls.


**** Create a standard type virtual switch

You're able to bind the virtual switch to multiple NICs.

- =-t=: Specify virtual switch type, =standard= is the default value if you don't provided.
- =-i=: Attach a physical NIC. You can't use =i= more than once!!!
- =-p=: Enable private mode, guests can't access each other, even they're conntected the same virtual switch!!!
- =public=: The name of virtual switch, maximum length of a switch name is also limited to 12 characters.

#+BEGIN_SRC bash
  doas vm switch create \
      -t standard \
      -i igc0 \
      public
#+END_SRC


Plz DO NOT attach more than one physical interface to the virtual switch, otherwise, it caused internet access issue!!!

***** Alternative way to create

You can separate the above command to the following commands for doing the same thing:

#+BEGIN_SRC bash
  doas vm switch create public
  doas vm switch add internal igc0
  # doas vm switch add internal wlan0

  #
  # Turn on/off the private mode on a switch
  #
  doas vm switch private internal on
  doas vm switch private internal off
#+END_SRC

Also, that's how you can modify the created virtual switch settings as well.


**** List and info

#+BEGIN_SRC bash
  doas vm switch list
  # NAME    TYPE      IFACE      ADDRESS  PRIVATE  MTU  VLAN  PORTS
  # public  standard  vm-public  -        no       -    -     igc0

  doas vm switch info internal
  # ------------------------
  # Virtual Switch: public
  # ------------------------
  #   type: standard
  #   ident: vm-public
  #   vlan: -
  #   physical-ports: igc0
  #   bytes-in: 3436 (3.355K)
  #   bytes-out: 1912 (1.867K)
#+END_SRC


**** What actual change on the host

When you created a virtual switch, you can see =ifconfig= list a new bridge NIC like this:

The new NIC's name will be =vm-YOUR_VIRTUAL_SWITCH_NAME=

#+BEGIN_SRC bash
  vm-public: flags=1008843<UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST,LOWER_UP> metric 0 mtu 1500
          options=0
          ether be:b3:69:de:eb:ef
          id 00:00:00:00:00:00 priority 32768 hellotime 2 fwddelay 15
          maxage 20 holdcnt 6 proto rstp maxaddr 2000 timeout 1200
          root id 00:00:00:00:00:00 priority 32768 ifcost 0 port 0
          member: igc0 flags=143<LEARNING,DISCOVER,AUTOEDGE,AUTOPTP>
                  ifmaxaddr 0 port 1 priority 128 path cost 20000
          groups: bridge vm-switch viid-4c918@
          nd6 options=9<PERFORMNUD,IFDISABLED>
#+END_SRC

Pay attention to the group attributes: =groups: bridge vm-switch viid-4c918@=, it helps you to manage your =PF= rules related to that =vm-public= i


**** How to switch physical interface for the given virtual switch

For example, my =TH80= both connect =wlan0= for WIFI and =igc0= Ethernet (as the default gateway), but I attach =igc0= when creating =public= virtual switch.

So, when I unplug the ethernet cable and reboot, =FreeBSD= will switch the default gateway to =wlan0= automatically. But the =public= virtaul switch won't be able to access internet, as it binds to =igc0= when created!!

So, I have to do the following between switching physical NICs:

#+BEGIN_SRC bash
  #
  # If I use Ethernet
  #
  doas vm switch remove public wlan0
  doas vm switch add public igc0

  #
  # If I use WIFI
  #
  doas vm switch remove public igc0
  doas vm switch add public wlan0
#+END_SRC



*** Create internal virtual switch

If you want all VMs attached to your current (FreeBSD Bhyve Host) network just like another computer on your LAN, then you should create a VM switch in this way.

For example, your local LAN network is =192.168.1.0/24=, the network topology would like this:

----------------------------------------------------
                192.168.1.0/24
----------------------------------------------------
                         |          
                   /------------\      
                   |  FreeBSD   |      
                   | Bhyve host |
                   \------------/      
                         |          
                    /----------\    NAT
                    | Internal | ------------------
                    |  Switch  |   192.168.2.0/24 
                    \----------/ ------------------
                         |
                /-----------------\
                |        |        |
                |        |        |
                |        |        |
             /-----\  /-----\  /-------\
             | VM1 |  | VM2 |  | VM... |
             |     |  |     |  |       |
             \-----/  \-----/  \-------/


Pros:
    - Protect all VMs behind the isolated network
    - Detailed control network traffic between VMs and the outside world

Crons:
    - Your =PF= rules become more complicated


**** Create a standard type virtual switch

- =-t=: Specify virtual switch type, =standard= is the default value if you don't provided.
- =-a=: Specify an IP adress that is assigned to the bridge interface.
- =-p=: Enable private mode, guests can't access each other, even they're conntected the same virtual switch!!!
- =internal=: The name of virtual switch, maximum length of a switch name is also limited to 12 characters.

#+BEGIN_SRC bash
  doas vm switch create \
      -t standard \
      -a 192.168.2.1/24 \
      internal
#+END_SRC


Plz DO NOT attach a physical interface to the virtual switch, so all network packets go through the virtual switch NIC, then you can use =PF= rules to control everything:)

***** Alternative way to create

You can separate the above command to the following commands for doing the same thing:

#+BEGIN_SRC bash
  doas vm switch create internal
  doas vm switch address internal 192.168.2.1/24

  #
  # Turn on/off the private mode on a switch
  #
  doas vm switch private internal on
  doas vm switch private internal off
#+END_SRC

Also, that's how you can modify the created virtual switch settings as well.


**** List and info

#+BEGIN_SRC bash
  doas vm switch list
  # NAME      TYPE      IFACE        ADDRESS         PRIVATE  MTU  VLAN  PORTS
  # internal  standard  vm-internal  192.168.2.1/24  no       -    -     -

  doas vm switch info internal
  # ------------------------
  # Virtual Switch: internal
  # ------------------------
  #   type: standard
  #   ident: vm-internal
  #   vlan: -
  #   physical-ports: -
  #   bytes-in: 0 (0.000B)
  #   bytes-out: 0 (0.000B)
#+END_SRC


**** What actual change on the host

When you created a virtual switch, you can see =ifconfig= list a new bridge NIC like this:

The new NIC's name will be =vm-YOUR_VIRTUAL_SWITCH_NAME=

#+BEGIN_SRC bash
  vm-internal: flags=1008843<UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST,LOWER_UP> metric 0 mtu 1500
          options=0
          ether 2e:48:ac:4d:0e:a3
          inet 192.168.2.1 netmask 0xffffff00 broadcast 192.168.2.255
          id 00:00:00:00:00:00 priority 32768 hellotime 2 fwddelay 15
          maxage 20 holdcnt 6 proto rstp maxaddr 2000 timeout 1200
          root id 00:00:00:00:00:00 priority 32768 ifcost 0 port 0
          groups: bridge vm-switch viid-d1efa@
          nd6 options=9<PERFORMNUD,IFDISABLED>
#+END_SRC


Also, new rules are added to routing table:

#+BEGIN_SRC bash
  netstat  -rn4

  # Routing tables
  # 
  # Internet:
  # Destination        Gateway            Flags     Netif Expire
  # default            192.168.1.200      UGS        igc0
  # 127.0.0.1          link#2             UH          lo0
  # 192.168.1.0/24     link#1             U          igc0
  # 192.168.1.160      link#2             UHS         lo0
  192.168.2.0/24     link#5             U      vm-inter
  192.168.2.1        link#2             UHS         lo0
#+END_SRC


**** Enable IP forwarding

You have to enable IP forwarding on the host to make NAT works!!!

Add the following settings to =/etc/rc.conf=:

#+BEGIN_SRC bash
  gateway_enable="yes" 
#+END_SRC


Reboot and then print the system setting to confirm:

#+BEGIN_SRC bash
  sysctl net.inet.ip | rg forward

  # net.inet.ip.forwarding: 1
#+END_SRC

That menas IP forwarding works.


**** =PF= settings

Suppose that your =PF= applies a block all policy, which means you only care about the pass rules.

In the following examples, they use these =PF= macros, feel free to change them to match yours:

#+BEGIN_SRC fish
  # ==============================================================================
  #
  # Macros
  #
  # - `nic_eth`: Default ethernet NIC
  # - `nic_wlan`: Default wireless NIC
  # - `nic_group `: The specified group name that applied to your NICs. You need
  #                 to add the `group pfnic` parameter to `ifconfig_xxx` inside
  #                 `/etc/rc.conf`.
  # - `$nic_group:network`: Get back the NIC assigned network, e.g. 192.168.1.0/24
  # - `($nic_eth)` or `($nic_wlan)`: Get back the exact NIC assigned IP
  #
  # ==============================================================================
  nic_eth = "igc0"
  nic_wlan = "wlan0"
  nic_group = "pfnic"
  nic_vm_switch = "vm-internal"
  nic_vm_group = "vm-switch"
  trust_vm_node = "{192.168.2.10, 192.168.2.20}"
#+END_SRC


Plz keep that in mind, all network packets between the host and VMs are through by the =internal= virtual switch (=192.168.2.1=).

#+BEGIN_SRC fish
  vm-internal: flags=1008843<UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST,LOWER_UP> metric 0 mtu 1500
         ether ea:36:15:e6:c3:02
         inet 192.168.2.1 netmask 0xffffff00 broadcast 192.168.2.255
         groups: bridge vm-switch viid-d1efa@
#+END_SRC

That's why the following macros give you back the following values:

- =nic_vm_switch=: Get back the =vm-internal= NIC.
- =nic_vm_group=: Get back the =vm-internal= NIC by the group name
- =nic_vm_switch:network=: Get back the virtual switch assigned network: =192.168.2.0/24=
 

***** NAT (Network Address Translation)

#+BEGIN_SRC fish
  # ==============================================================================
  # NAT for VM
  #
  # Since translation occurs before filtering the filter engine will see packets
  # as they look after any addresses and ports have been translated.
  # ==============================================================================
  nat on $nic_eth from $nic_vm_switch:network to any -> ($nic_eth)
#+END_SRC


***** VM pass rules

Usually, your PF settings should already have the pass rules for the external NIC (=nic_eth= in this example) that connects to your router to reach the internet. So, the following pass rules only on the virtual network part!!!

Also, keep that in mind, a network packet go through the following path (or steps) before going out to your default gateway via =nic_eth= (in this example):

VM NIC (=192.168.2.10=) --> Virtual Switch NIC (=192.168.2.1=) --> Gateway NIC (=nic_eth=) --> NAT (tranlsate =192.168.2.0/24= to your =nic_eth= network) --> Router

As you've already had your pass rules on =nic_eth=, that's why you don't need to care about that part anymore, you only focus on =VM NIC --> Virtual Switch NIC (before NAT)= rules!!!


#+BEGIN_SRC fish
  # ==============================================================================
  #
  # All VM related
  #
  # ==============================================================================

  #
  # Ping outside
  #
  pass in quick on $nic_vm_group proto icmp from $nic_vm_switch:network to any icmp-type echoreq

  #
  # This make VM DNS and NTP works!!!
  #
  pass in quick on $nic_vm_group proto udp from $nic_vm_switch:network to any port {domain,ntp,mdns,ssdp,bootpc}

  #
  # Allow dialy app to use: all outgoing TCP and related reply
  #
  pass in quick on $nic_vm_group proto tcp from $nic_vm_switch:network to any

  #
  # Youtube needed
  # https       443/udp
  # ssdp        1900/udp   #Selective Service Discovery Protocol (UPnP)
  #
  pass in quick on $nic_vm_group proto udp from $nic_vm_switch:network to any port {https,ssdp}

  #
  # Allow host to ssh to vm
  #
  # Packets path: Virtual switch NIC --> out ( from virtual switch IP trust VM IP )
  #
  pass out quick on $nic_vm_group proto tcp from ($nic_vm_switch) to $trust_vm_node port ssh
#+END_SRC



*** Virtual switch configuration file

#+BEGIN_SRC bash
  cat ~/vm/.config/system.conf

  # vm set console=tmux
  # switch_list="internal"
  # type_internal="standard"
  # ports_internal="igc0 wlan0"
  # addr_internal="192.168.2.1/24" 
#+END_SRC



** Download ISO

You can  run =doas vm ISO_LINK_URL_HERE= to downlaod the ISO file or download somewhere else (get the benefit from mirror site) and then move it into ~$vm_dir/.iso~ folder.

After that, you can run =doas vm iso= to list all downloaded ISOs:

#+BEGIN_SRC bash
  doas vm iso
  # DATASTORE           FILENAME
  # default             Fedora-Everything-netinst-x86_64-39-1.5.iso
#+END_SRC


** Create guest configuration 

All available settings are in =/usr/local/share/examples/vm-bhyve/config.sample=. You better to modify on top of the existing pre-configed template!!!

You should copy one of them, modify it and save to =$vm_dir/.template=.


** Create guest VM

=-t arch_linux=: Use =$vm_dir/.template/arch_linux.conf= as template to create VM
=-s 20GB=: Init 20GB virtual disk, override the =disk0.size= in config file
=my-arch=: VM name

#+BEGIN_SRC bash
  #
  # Create VM, just created, not start the vm at all!!!
  #
  doas vm create -t arch_linux my-arch

  #
  # List created VM
  #
  doas vm list
  # NAME     DATASTORE  LOADER  CPU  MEMORY  VNC  AUTO  STATE
  # my-arch  default    uefi    16   16G     -    No    Stopped

  #
  # Here is where the VM located
  #
  ls -lht ~/vm/my-arch/
  # -rw-r--r--  1 root wheel  2.7K Mar 17 12:33 my-arch.conf
  # -rw-------  1 root wheel   30G Mar 17 12:33 disk0.img
  # -rw-r--r--  1 root wheel   92B Mar 17 12:33 vm-bhyve.log
#+END_SRC


=~/vm/my-arch/my-arch.conf= is a copy of the given template with the newly added =uuid= and unique NIC mac address:

#+BEGIN_SRC bash
  bat ~/vm/my-arch/my-arch.conf

  # loader="uefi"
  # cpu=16
  # memory=16G
  # network0_type="virtio-net"
  # network0_switch="public"
  # disk0_type="virtio-blk"
  # disk0_name="disk0.img"
  # graphics="yes"
  # graphics_port="5999"
  # graphics_res="1600x1200"
  # graphics_wait="auto"
  # xhci_mouse="yes"
  # uuid="9ec2dd39-e3ed-11ee-997c-5847ca7014b5"
  # network0_mac="58:9c:fc:02:33:f4"
#+END_SRC


Also, you can list the vm info like this:

#+BEGIN_SRC bash
  doas vm info my-arch
  # ------------------------
  # Virtual Machine: my-arch
  # ------------------------
  #   state: stopped
  #   datastore: default
  #   loader: grub
  #   uuid: 9ec2dd39-e3ed-11ee-997c-5847ca7014b5
  #   cpu: 16
  #   memory: 16G
  # 
  #   network-interface
  #     number: 0
  #     emulation: virtio-net
  #     virtual-switch: internal
  #     fixed-mac-address: 58:9c:fc:02:33:f4
  #     fixed-device: -
  # 
  #   virtual-disk
  #     number: 0
  #     device-type: file
  #     emulation: virtio-blk
  #     options: -
  #     system-path: /home/wison/vm/my-arch/disk0.img
  #     bytes-size: 32212254720 (30.000G)
  #     bytes-used: 1024 (1.000K)
#+END_SRC


If you want to re-create a VM, you can run ~doas vm destroy my-arch~ to delete it and re-create again.


** Launch the guest installation process

First, you need a VNC client to connecto the guest VNC server if you enable ~graphics="yes"~ in the VM guest configuration:

#+BEGIN_SRC bash
  #
  # `wlvncc`: A work-in-progress implementation of a Wayland native VNC client. 
  #
  doas pkg install wlvncc
#+END_SRC

Now, let's install Arch Linux:

#+BEGIN_SRC bash
  #
  # `-f`: Guest will be started in the foreground on stdio. 
  #
  doas vm install -f my-arch archlinux-2024.03.01-x86_64.iso
#+END_SRC


After that, list the VNC port and connect to it to finish the installation process:

#+BEGIN_SRC bash
  #
  # List guest vnc port
  #
  doas vm list
  # NAME     DATASTORE  LOADER  CPU  MEMORY  VNC           AUTO  STATE
  # my-arch  default    uefi    16   16G     0.0.0.0:5999  No    Locked (th80)

  #
  # Connect to it (as it will wait for the VNC connect before ISO boot)
  #
  wlvncc 127.0.0.1 5999
#+END_SRC


** Run and stop and related VM stuff

If you're currently inside a tmux session, then you HAVE TO detech or open a new terminal before running the following command, as it will start a new tmux and attach into it immediately.

#+BEGIN_SRC bash
  #
  # `-f`: Guest will be started in the foreground on stdio. 
  # `-i`: Starts the guest in interactive mode on a foreground tmux session. 
  #
  doas vm start -fi my-arch
  doas vm stop my-arch

  #
  # Force to power off when needed
  #
  doas vm poweroff -f my-arch
#+END_SRC


